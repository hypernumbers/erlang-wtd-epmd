#!/usr/bin/env escript
%% -*- erlang -*-

main([]) ->

    ensure_config(),
    ensure_docroot(),

    Node = atom_to_list(conf_lname()),
    PipeDir = "/tmp/" ++ Node ++ "/",
    filelib:ensure_dir("var/runerl_log/"),
    filelib:ensure_dir(PipeDir),

    Cmd = "run_erl -daemon " ++ PipeDir ++ " var/runerl_log " ++
    "\"erl -name " ++ Node ++ " -smp "  ++
        "-pa ./ebin -pa ./deps/*/ebin " ++
        "-s wtdepmd_app " ++
        "-config var/sys\"",

    case os:cmd(Cmd) of
        []   ->
            ok,
            make_shell(Node);
        Else ->
            io:format("wtdepmd failed to boot:~n~s~n", [Else]),
            ok
    end.

make_shell(NodeName) ->
    Shell = io_lib:format("#!/bin/bash~nto_erl /tmp/~s/~n", [NodeName]),
    file:write_file("shell", Shell),
    os:cmd("chmod +x shell").

ensure_docroot() ->
    case has_docroot() of
        false -> copy_default_docroot();
        true  -> ok
    end.

has_docroot() ->
    filelib:is_dir(docroot_path()).

ensure_config() ->
    case has_config() of
        false -> copy_default_config();
        true  -> ok
    end.

has_config() ->
    filelib:is_file(config_file()).

docroot_path() ->
    [root(), "/var/docroot/"].


config_file() ->
    [root(), "/var/", "sys.config"].

copy_default_docroot() ->
    ok = filelib:ensure_dir(docroot_path()),
    DefaultDocroot = root() ++ "/priv/docroot/*",
    os:cmd("cp -R " ++ DefaultDocroot ++ " " ++ docroot_path()).

copy_default_config() ->
    ok = filelib:ensure_dir([root(), "/var/"]),
    {ok, _Bytes} =
        file:copy([root(), "/priv/", "sys.config.default"], config_file()),
    ok.

conf_lname() ->
    nodeatom(read_config(nodename)).

nodeatom(Name) ->
    Host     = string:strip(os:cmd("hostname -f"), both, $\n),
    LongName = io_lib:format("~s@~s", [Name, Host]),
    list_to_atom(lists:flatten(LongName)).

read_config(Key) ->
    {ok, [Config]}  = file:consult(config_file()),
    {wtdepmd, Conf} = lists:keyfind(wtdepmd, 1, Config),
    {Key, Val}      = lists:keyfind(Key, 1, Conf),
    Val.

root() ->
    {ok, Root} = file:get_cwd(),
    Root.
